diff --color -Naur rCore-Tutorial-v3/user/Cargo.lock user/Cargo.lock
--- rCore-Tutorial-v3/user/Cargo.lock	2024-12-06 11:33:21
+++ user/Cargo.lock	2024-12-05 09:19:17
@@ -3,5 +3,131 @@
 version = 4
 
 [[package]]
+name = "aho-corasick"
+version = "1.1.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "8e60d3430d3a69478ad0993f19238d2df97c507009a52b3c10addcd7f6bcb916"
+dependencies = [
+ "memchr",
+]
+
+[[package]]
+name = "bare-metal"
+version = "0.2.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5deb64efa5bd81e31fcd1938615a6d98c82eafcbcd787162b6f63b91d6bac5b3"
+dependencies = [
+ "rustc_version",
+]
+
+[[package]]
+name = "bit_field"
+version = "0.10.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "dc827186963e592360843fb5ba4b973e145841266c1357f7180c43526f2e5b61"
+
+[[package]]
+name = "bitflags"
+version = "1.3.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a"
+
+[[package]]
+name = "lazy_static"
+version = "1.5.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "bbd2bcb4c963f2ddae06a2efc7e9f3591312473c50c6685e1f298068316e66fe"
+
+[[package]]
+name = "log"
+version = "0.4.22"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a7a70ba024b9dc04c27ea2f0c0548feb474ec5c54bba33a7f72f873a39d07b24"
+
+[[package]]
+name = "memchr"
+version = "2.7.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3"
+
+[[package]]
+name = "regex"
+version = "1.11.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "b544ef1b4eac5dc2db33ea63606ae9ffcfac26c1416a2806ae0bf5f56b201191"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-automata",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-automata"
+version = "0.4.9"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "809e8dc61f6de73b46c85f4c96486310fe304c434cfa43669d7b40f711150908"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-syntax",
+]
+
+[[package]]
+name = "regex-syntax"
+version = "0.8.5"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "2b15c43186be67a4fd63bee50d0303afffcef381492ebe2c5d87f324e1b8815c"
+
+[[package]]
+name = "riscv"
+version = "0.6.0"
+source = "git+https://github.com/rcore-os/riscv#11d43cf7cccb3b62a3caaf3e07a1db7449588f9a"
+dependencies = [
+ "bare-metal",
+ "bit_field",
+ "bitflags",
+ "log",
+ "riscv-target",
+]
+
+[[package]]
+name = "riscv-target"
+version = "0.1.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "88aa938cda42a0cf62a20cfe8d139ff1af20c2e681212b5b34adb5a58333f222"
+dependencies = [
+ "lazy_static",
+ "regex",
+]
+
+[[package]]
+name = "rustc_version"
+version = "0.2.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "138e3e0acb6c9fb258b19b67cb8abd63c00679d2851805ea151465464fe9030a"
+dependencies = [
+ "semver",
+]
+
+[[package]]
+name = "semver"
+version = "0.9.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403"
+dependencies = [
+ "semver-parser",
+]
+
+[[package]]
+name = "semver-parser"
+version = "0.7.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3"
+
+[[package]]
 name = "user_lib"
 version = "0.1.0"
+dependencies = [
+ "riscv",
+]
diff --color -Naur rCore-Tutorial-v3/user/Cargo.toml user/Cargo.toml
--- rCore-Tutorial-v3/user/Cargo.toml	2024-12-05 22:49:19
+++ user/Cargo.toml	2024-12-05 09:17:19
@@ -7,6 +7,7 @@
 # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
 
 [dependencies]
+riscv = { git = "https://github.com/rcore-os/riscv", features = ["inline-asm"] } 
 
 [profile.release]
 debug = true
diff --color -Naur rCore-Tutorial-v3/user/src/bin/00power_3.rs user/src/bin/00power_3.rs
--- rCore-Tutorial-v3/user/src/bin/00power_3.rs	2024-12-06 20:32:31
+++ user/src/bin/00power_3.rs	2024-12-06 09:20:50
@@ -6,24 +6,23 @@
 
 const LEN: usize = 100;
 
-static mut S: [u64; LEN] = [0u64; LEN];
-
 #[no_mangle]
-unsafe fn main() -> i32 {
+fn main() -> i32 {
     let p = 3u64;
     let m = 998244353u64;
-    let iter: usize = 300000;
+    let iter: usize = 200000;
+    let mut s = [0u64; LEN];
     let mut cur = 0usize;
-    S[cur] = 1;
+    s[cur] = 1;
     for i in 1..=iter {
         let next = if cur + 1 == LEN { 0 } else { cur + 1 };
-        S[next] = S[cur] * p % m;
+        s[next] = s[cur] * p % m;
         cur = next;
         if i % 10000 == 0 {
             println!("power_3 [{}/{}]", i, iter);
         }
     }
-    println!("{}^{} = {}(MOD {})", p, iter, S[cur], m);
+    println!("{}^{} = {}(MOD {})", p, iter, s[cur], m);
     println!("Test power_3 OK!");
     0
 }
diff --color -Naur rCore-Tutorial-v3/user/src/bin/01power_5.rs user/src/bin/01power_5.rs
--- rCore-Tutorial-v3/user/src/bin/01power_5.rs	2024-12-06 20:32:31
+++ user/src/bin/01power_5.rs	2024-12-06 09:20:50
@@ -6,24 +6,23 @@
 
 const LEN: usize = 100;
 
-static mut S: [u64; LEN] = [0u64; LEN];
-
 #[no_mangle]
-unsafe fn main() -> i32 {
+fn main() -> i32 {
     let p = 5u64;
     let m = 998244353u64;
-    let iter: usize = 210000;
+    let iter: usize = 140000;
+    let mut s = [0u64; LEN];
     let mut cur = 0usize;
-    S[cur] = 1;
+    s[cur] = 1;
     for i in 1..=iter {
         let next = if cur + 1 == LEN { 0 } else { cur + 1 };
-        S[next] = S[cur] * p % m;
+        s[next] = s[cur] * p % m;
         cur = next;
         if i % 10000 == 0 {
             println!("power_5 [{}/{}]", i, iter);
         }
     }
-    println!("{}^{} = {}(MOD {})", p, iter, S[cur], m);
+    println!("{}^{} = {}(MOD {})", p, iter, s[cur], m);
     println!("Test power_5 OK!");
     0
 }
diff --color -Naur rCore-Tutorial-v3/user/src/bin/02power_7.rs user/src/bin/02power_7.rs
--- rCore-Tutorial-v3/user/src/bin/02power_7.rs	2024-12-06 20:32:31
+++ user/src/bin/02power_7.rs	2024-12-06 09:20:50
@@ -6,24 +6,23 @@
 
 const LEN: usize = 100;
 
-static mut S: [u64; LEN] = [0u64; LEN];
-
 #[no_mangle]
-unsafe fn main() -> i32 {
+fn main() -> i32 {
     let p = 7u64;
     let m = 998244353u64;
-    let iter: usize = 240000;
+    let iter: usize = 160000;
+    let mut s = [0u64; LEN];
     let mut cur = 0usize;
-    S[cur] = 1;
+    s[cur] = 1;
     for i in 1..=iter {
         let next = if cur + 1 == LEN { 0 } else { cur + 1 };
-        S[next] = S[cur] * p % m;
+        s[next] = s[cur] * p % m;
         cur = next;
         if i % 10000 == 0 {
             println!("power_7 [{}/{}]", i, iter);
         }
     }
-    println!("{}^{} = {}(MOD {})", p, iter, S[cur], m);
+    println!("{}^{} = {}(MOD {})", p, iter, s[cur], m);
     println!("Test power_7 OK!");
     0
 }
diff --color -Naur rCore-Tutorial-v3/user/src/bin/04load_fault.rs user/src/bin/04load_fault.rs
--- rCore-Tutorial-v3/user/src/bin/04load_fault.rs	2024-12-06 20:32:31
+++ user/src/bin/04load_fault.rs	1970-01-01 08:00:00
@@ -1,18 +0,0 @@
-#![no_std]
-#![no_main]
-
-#[macro_use]
-extern crate user_lib;
-
-use core::ptr::{null_mut, read_volatile};
-
-#[no_mangle]
-fn main() -> i32 {
-    println!("\nload_fault APP running...\n");
-    println!("Into Test load_fault, we will insert an invalid load operation...");
-    println!("Kernel should kill this application!");
-    unsafe {
-        let _i = read_volatile(null_mut::<u8>());
-    }
-    0
-}
diff --color -Naur rCore-Tutorial-v3/user/src/bin/05store_fault.rs user/src/bin/05store_fault.rs
--- rCore-Tutorial-v3/user/src/bin/05store_fault.rs	2024-12-06 20:32:31
+++ user/src/bin/05store_fault.rs	1970-01-01 08:00:00
@@ -1,18 +0,0 @@
-#![no_std]
-#![no_main]
-
-#[macro_use]
-extern crate user_lib;
-
-use core::ptr::null_mut;
-
-#[no_mangle]
-fn main() -> i32 {
-    println!("\nstore_fault APP running...\n");
-    println!("Into Test store_fault, we will insert an invalid store operation...");
-    println!("Kernel should kill this application!");
-    unsafe {
-        null_mut::<u8>().write_volatile(1);
-    }
-    0
-}
diff --color -Naur rCore-Tutorial-v3/user/src/bin/sbrk_test.rs user/src/bin/sbrk_test.rs
--- rCore-Tutorial-v3/user/src/bin/sbrk_test.rs	2024-12-06 20:32:31
+++ user/src/bin/sbrk_test.rs	1970-01-01 08:00:00
@@ -1,48 +0,0 @@
-#![no_std]
-#![no_main]
-
-#[macro_use]
-extern crate user_lib;
-
-use core::ptr::slice_from_raw_parts_mut;
-use user_lib::sbrk;
-
-#[no_mangle]
-fn main() -> i32 {
-    println!("Test sbrk start.");
-    const PAGE_SIZE: usize = 0x1000;
-    let origin_brk = sbrk(0);
-    println!("origin break point = {:x}", origin_brk);
-    let brk = sbrk(PAGE_SIZE as i32);
-    if brk != origin_brk {
-        return -1;
-    }
-    let brk = sbrk(0);
-    println!("one page allocated,  break point = {:x}", brk);
-    println!("try write to allocated page");
-    let new_page = unsafe {
-        &mut *slice_from_raw_parts_mut(origin_brk as usize as *const u8 as *mut u8, PAGE_SIZE)
-    };
-    for pos in 0..PAGE_SIZE {
-        new_page[pos] = 1;
-    }
-    println!("write ok");
-    sbrk(PAGE_SIZE as i32 * 10);
-    let brk = sbrk(0);
-    println!("10 page allocated,  break point = {:x}", brk);
-    sbrk(PAGE_SIZE as i32 * -11);
-    let brk = sbrk(0);
-    println!("11 page DEALLOCATED,  break point = {:x}", brk);
-    println!("try DEALLOCATED more one page, should be failed.");
-    let ret = sbrk(PAGE_SIZE as i32 * -1);
-    if ret != -1 {
-        println!("Test sbrk failed!");
-        return -1;
-    }
-    println!("Test sbrk almost OK!");
-    println!("now write to deallocated page, should cause page fault.");
-    for pos in 0..PAGE_SIZE {
-        new_page[pos] = 2;
-    }
-    0
-}
diff --color -Naur rCore-Tutorial-v3/user/src/lib.rs user/src/lib.rs
--- rCore-Tutorial-v3/user/src/lib.rs	2024-12-06 21:39:45
+++ user/src/lib.rs	2024-12-06 10:56:43
@@ -1,7 +1,6 @@
 #![no_std]
 #![feature(linkage)]
 
-
 #[macro_use]
 pub mod console;
 mod lang_items;
@@ -10,6 +9,7 @@
 #[no_mangle]
 #[link_section = ".text.entry"]
 pub extern "C" fn _start() -> ! {
+    clear_bss();
     exit(main());
     panic!("unreachable after sys_exit!");
 }
@@ -20,6 +20,16 @@
     panic!("Cannot find main!");
 }
 
+fn clear_bss() {
+    extern "C" {
+        fn start_bss();
+        fn end_bss();
+    }
+    (start_bss as usize..end_bss as usize).for_each(|addr| unsafe {
+        (addr as *mut u8).write_volatile(0);
+    });
+}
+
 use syscall::*;
 
 pub fn write(fd: usize, buf: &[u8]) -> isize {
@@ -33,8 +43,4 @@
 }
 pub fn get_time() -> isize {
     sys_get_time()
-}
-
-pub fn sbrk(size: i32) -> isize {
-    sys_sbrk(size)
 }
diff --color -Naur rCore-Tutorial-v3/user/src/syscall.rs user/src/syscall.rs
--- rCore-Tutorial-v3/user/src/syscall.rs	2024-12-06 20:32:31
+++ user/src/syscall.rs	2024-12-06 10:56:13
@@ -4,7 +4,6 @@
 const SYSCALL_EXIT: usize = 93;
 const SYSCALL_YIELD: usize = 124;
 const SYSCALL_GET_TIME: usize = 169;
-const SYSCALL_SBRK: usize = 214;
 
 fn syscall(id: usize, args: [usize; 3]) -> isize {
     let mut ret: isize;
@@ -34,8 +33,4 @@
 
 pub fn sys_get_time() -> isize {
     syscall(SYSCALL_GET_TIME, [0, 0, 0])
-}
-
-pub fn sys_sbrk(size: i32) -> isize {
-    syscall(SYSCALL_SBRK, [size as usize, 0, 0])
 }
